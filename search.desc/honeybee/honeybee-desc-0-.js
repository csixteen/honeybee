searchState.loadedDescShard("honeybee", 0, "<code>honeybee</code> is a port of i3status, written in Rust. It means …\nA port of i3status, written in Rust.\nThis is the main container of all the running modules.\nEstablishes the communication between individual modules …\nIf an absolute path is provided, then it shall be used …\nEverything related to format strings, placeholders and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates whether colors will be disabled or not.\nMaximum number of blocking threads used by honeybee.\nThe <code>output_format</code> configuration defines the format strings …\ni3bar protocol. For full reference, check the main …\nIndicates whether honeybee will stop after the first …\nUsed to control the update interval of modules.\nUtilities, mostly to manipulate files.\nStructs and methods to manipulate widgets. A <code>Widget</code> is a …\nA rendered widget can be simply a string or an i3 Block.\nReturn <code>RenderedWidget::None</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThese are the values that you’ll find/specify at the …\nReturn …\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\n<code>Error</code> is a trait representing the basic expectations for …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some reference to the inner value if it is of type …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nProvides type-based access to context intended for error …\nReturns the lower-level source of this error, if any.\nReturns an iterator starting with the current error and …\nFormat strings for <code>full_text</code> and <code>short_text</code>.\nMaps specific placeholders to the corresponding values. …\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReplaces the placeholders with the corresponding values in …\nGets the status (charging, discharging, unknown, full), …\nReturn <code>Module</code>\nGets used, free, available and total amount of bytes on …\nOutputs the contents of the specified file. You can use …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the system load (number of processes waiting for CPU …\nMemory usage on a Linux system from /proc/meminfo.\nCheck if the given <code>path</code> exists in the filesystem. You can …\nExpands the given path to a pidfile and checks if the …\nOutputs the current time in the local timezone, if <code>timezone</code>…\nGets the link signal, frequency and SSID of the given …\nRepresents the operating status. Corresponds to …\nReturn <code>ChargingStatus::Discharging</code>\nReturn <code>ThresholdType::Percentage</code>\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEverything needed to manipulate colors.\nDzen is a general purpose messaging, notification and …\ni3bar output format\nlemonbar is a lightweight bar based entirely on XCB. It …\nUse ANSI Escape sequences to produce a terminal-output as …\nxmobar is a minimalistic, mostly text based, status bar. …\nA color is a string representing a canonical RGB …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the contents of the status line for a …\nThe first message in the protocol is a header block.\nThe width of the text will determine the block width in …\nAligns the text on the center, left or right, when the …\nOverrides the background color for this particular block.\nOverrides the border color for this particular block.\nDefines the width (in pixels) of the bottom border of this …\nDefines the width (in pixels) of the left border of this …\nDefines the width (in pixels) of the right border of this …\nDefines the width (in pixels) of the top border of this …\nThe color used to display the contents of <code>full_text</code> or …\nReturn …\nReturn <code>Alignment::Left</code>\nReturn <code>Markup::Pango</code>\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis is the only required key by the protocol. If it’s …\nIn case there are multiple instances of a block (e.g. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates how the block should be parsed.\nThe minimum width, in pixels, of this block. If <code>full_text</code> …\nUnique name of this block, used to identify it in scripts …\nIndicates whether a separator line should be drawn after …\nAmount of pixels to leave blank after the block. Unless …\nIf provided, the <code>short_text</code> will be used when the status …\nSpecifies whether the current value is urgent (e.g. no …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn <code>IecSymbol::GiB</code>\nReturn <code>SiSymbol::G</code>\nReturn <code>Hertz::GHz</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>file</code> is an absolute path and the file exists, then its …\nThe graphical element that is used to render the output of …\nThe state of the widget will define its color value, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")